from typing import List, Optional
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import math

from icecream import ic
from utilities.icream import logger

from typing import List, Optional, Dict, Any
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import math
import logging

logger = logging.getLogger(__name__)

from typing import List, Optional, Dict, Any
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import math
import logging

logger = logging.getLogger(__name__)


class KeyboardBuilder:
    def __init__(self, items_per_page: int = 10):
        self.items_per_page = items_per_page

    async def create_inline_keyboard(
            self,
            items: List[Dict[str, Any]],
            current_page: int = 1,
            with_pagination: bool = True,
            callback_pg_prefix: str = "item",
            row_width: int = 1,
            group_buttons: bool = False,
            callback_cancel: Optional[str] = None,
            callback_prod: Optional[str] = None  # –î–æ–±–∞–≤–ª–µ–Ω –æ–±—Ä–∞—Ç–Ω–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    ) -> InlineKeyboardMarkup:
        """
        –°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≥–∏–±–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –∫–Ω–æ–ø–æ–∫.

        Args:
            items: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∫–Ω–æ–ø–æ–∫
            current_page: –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            with_pagination: –í–∫–ª—é—á–∏—Ç—å –ø–∞–≥–∏–Ω–∞—Ü–∏—é
            callback_pg_prefix: –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è callback –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            row_width: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Ä—è–¥—É –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
            group_buttons: –†–µ–∂–∏–º –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –∫–Ω–æ–ø–æ–∫ (–µ—Å–ª–∏ True, –∫–Ω–æ–ø–∫–∏ –≥—Ä—É–ø–ø–∏—Ä—É—é—Ç—Å—è –¥–ª—è –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏)
            callback_cancel: Callback –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã
            callback_prod: –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è callback –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        """
        keyboard = []

        if not items:
            return InlineKeyboardMarkup(inline_keyboard=[[]])

        total_pages = math.ceil(len(items) / self.items_per_page) if with_pagination else 1

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if with_pagination:
            start_idx = (current_page - 1) * self.items_per_page
            end_idx = start_idx + self.items_per_page
            current_items = items[start_idx:end_idx]
        else:
            current_items = items

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
        if group_buttons:
            # –†–µ–∂–∏–º –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –∫–Ω–æ–ø–æ–∫ (–Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏)
            for item in current_items:
                row = []
                if "buttons" in item and isinstance(item["buttons"], list):
                    for btn in item["buttons"]:
                        if isinstance(btn, dict) and "text" in btn and "callback" in btn:
                            callback_data = f"{callback_prod}{btn['callback']}" if callback_prod else btn["callback"]
                            button = InlineKeyboardButton(
                                text=btn["text"],
                                callback_data=callback_data
                            )
                            row.append(button)
                if row:
                    keyboard.append(row)
        else:
            # –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º (–ø–æ row_width –∫–Ω–æ–ø–æ–∫ –≤ —Ä—è–¥—É)
            for i in range(0, len(current_items), row_width):
                row = []
                ic(current_items)
                for item in current_items[i:i + row_width]:
                    if isinstance(item, dict) and "text" in item and "callback" in item:
                        callback_data = f"{callback_prod}{item['callback']}" if callback_prod else item["callback"]
                        button = InlineKeyboardButton(
                            text=item["text"],
                            callback_data=callback_data
                        )
                        ic(button)
                        row.append(button)
                if row:
                    keyboard.append(row)

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
        if with_pagination and total_pages > 1:
            navigation_row = []
            if current_page > 1:
                navigation_row.append(
                    InlineKeyboardButton(
                        text="‚¨ÖÔ∏è",
                        callback_data=f"{callback_pg_prefix}+page+{current_page - 1}"
                    )
                )
            navigation_row.append(
                InlineKeyboardButton(
                    text=f"{current_page}/{total_pages}",
                    callback_data="current_page"
                )
            )
            if current_page < total_pages:
                navigation_row.append(
                    InlineKeyboardButton(
                        text="‚û°Ô∏è",
                        callback_data=f"{callback_pg_prefix}+page+{current_page + 1}"
                    )
                )
            keyboard.append(navigation_row)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
        if callback_cancel:
            keyboard.append([
                InlineKeyboardButton(
                    text="üîô",
                    callback_data=callback_cancel
                )
            ])

        return InlineKeyboardMarkup(inline_keyboard=keyboard)
